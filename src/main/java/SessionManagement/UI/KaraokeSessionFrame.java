/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package SessionManagement.UI;

import DTO.RegisteredSessionDTO;
import DTO.SongDTO;
import Generic.Event;
import Generic.Pair;
import MainDriver.MainFrame;
import SessionManagement.ADT.ArrayList;
import SessionManagement.Utility.BackgroundPlayer;
import SessionManagement.Utility.PlayerState;
import java.awt.Point;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.html.HTMLEditorKit;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author zkang
 */
public class KaraokeSessionFrame extends javax.swing.JFrame {

    private static final Logger logger = LogManager.getLogger(KaraokeSessionFrame.class.getName());
    private BackgroundPlayer player;
    private java.util.ArrayList<SongDTO> songList;
    private RegisteredSessionDTO sessionData;

    /**
     * Creates new form Temp
     */
    public KaraokeSessionFrame(RegisteredSessionDTO sessionData) {
        player = new BackgroundPlayer();

        songList = new DAO.SongDAO().getAll();

        player.onNextSong(new Event() {
            @Override
            public void callback(Object[] args) {
                updateCurrentPlaylistTable(player.getNowPlayingSongList());
            }
        });

        player.onPlaying(new Event() {
            @Override
            public void callback(Object[] args) {
                updateTimestamp(player.getTimestampNow(), player.getTimestampMax());
                var lyricTop = player.getLyricTop();
                var lyricMiddle = player.getLyricMiddle();
                var lyricBottom = player.getLyricBottom();
                displayLyrics(
                        lyricTop == null ? "" : lyricTop.getRight(),
                        lyricMiddle == null ? "" : lyricMiddle.getRight(),
                        lyricBottom == null ? "" : lyricBottom.getRight(),
                        2
                );
            }
        });

        player.onStopped(new Event() {
            @Override
            public void callback(Object[] args) {
                updateCurrentPlaylistTable(player.getNowPlayingSongList());
                updateTimestamp(player.getTimestampNow(), player.getTimestampMax());
                var lyricTop = player.getLyricTop();
                var lyricMiddle = player.getLyricMiddle();
                var lyricBottom = player.getLyricBottom();
                displayLyrics(
                        lyricTop == null ? "" : lyricTop.getRight(),
                        lyricMiddle == null ? "" : lyricMiddle.getRight(),
                        lyricBottom == null ? "" : lyricBottom.getRight(),
                        2
                );
            }
        });

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                super.windowClosing(e);
                if (player.isAlive()) {
                    player.interrupt();
                    logger.info("Stopped BackgroundPlayer Thread");
                }
                new MainFrame().setVisible(true);
            }
        });

        initComponents();
        this.setLocationRelativeTo(null);

        this.sessionData = sessionData;
        this.setTitle(String.format("Huahee Karaoke >> Karaoke Session (%s)", new Object[]{sessionData.getSessionId()}));
        // Hide last column
        this.nowPlayingListTable.removeColumn(nowPlayingListTable.getColumnModel().getColumn(5));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        centerPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lyricsPane = new javax.swing.JEditorPane();
        topPanel = new javax.swing.JPanel();
        nowPlayingLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        infoBtn = new javax.swing.JButton();
        historyBtn = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        addSongBtn = new javax.swing.JButton();
        removeSongBtn = new javax.swing.JButton();
        hintLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        nowPlayingListTable = new javax.swing.JTable();
        bottomPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        nowPlayingTimestampLabel = new javax.swing.JLabel();
        maxDurationTimestampLabel = new javax.swing.JLabel();
        progressSlider = new javax.swing.JSlider();
        skipSongBtn = new javax.swing.JButton();
        stopSessionBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Huahee Karaoke >> Karaoke Session (SESSION_ID)");
        setPreferredSize(new java.awt.Dimension(800, 600));

        java.awt.GridBagLayout centerPanelLayout = new java.awt.GridBagLayout();
        centerPanelLayout.columnWeights = new double[] {1.0};
        centerPanelLayout.rowWeights = new double[] {1.0};
        centerPanel.setLayout(centerPanelLayout);

        lyricsPane.setContentType("text/html"); // NOI18N
        lyricsPane.setEditorKit(new HTMLEditorKit());
        lyricsPane.setText("<html>\r\n  <head>\r\n\r\n  </head>\r\n  <body>\r\n    <center>\n      <p style=\"margin-top: 0\" id=\"body\">\r\n      \r\n      </p>\r\n    </center>\n  </body>\r\n</html>\r\n");
        jScrollPane3.setViewportView(lyricsPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        centerPanel.add(jScrollPane3, gridBagConstraints);

        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        java.awt.GridBagLayout topPanelLayout = new java.awt.GridBagLayout();
        topPanelLayout.columnWeights = new double[] {1.0};
        topPanelLayout.rowWeights = new double[] {1.0, 1.0, 3.0};
        topPanel.setLayout(topPanelLayout);

        nowPlayingLabel.setText("Now Playing: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        topPanel.add(nowPlayingLabel, gridBagConstraints);

        jPanel4.setLayout(new java.awt.BorderLayout());

        jPanel1.setMinimumSize(new java.awt.Dimension(100, 22));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setMinimumSize(new java.awt.Dimension(100, 42));
        jPanel3.setPreferredSize(new java.awt.Dimension(100, 42));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel6.setPreferredSize(new java.awt.Dimension(82, 32));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        infoBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/info.png"))); // NOI18N
        infoBtn.setToolTipText("Session Information");
        infoBtn.setMaximumSize(new java.awt.Dimension(36, 36));
        infoBtn.setMinimumSize(new java.awt.Dimension(36, 36));
        infoBtn.setPreferredSize(new java.awt.Dimension(32, 32));
        infoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                infoBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel6.add(infoBtn, gridBagConstraints);

        historyBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/history.png"))); // NOI18N
        historyBtn.setToolTipText("Song Add History");
        historyBtn.setPreferredSize(new java.awt.Dimension(32, 32));
        historyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel6.add(historyBtn, gridBagConstraints);

        jPanel3.add(jPanel6, java.awt.BorderLayout.WEST);

        jPanel5.setMinimumSize(new java.awt.Dimension(82, 42));
        jPanel5.setPreferredSize(new java.awt.Dimension(82, 22));
        java.awt.GridBagLayout jPanel5Layout = new java.awt.GridBagLayout();
        jPanel5Layout.columnWeights = new double[] {1.0, 1.0};
        jPanel5Layout.rowWeights = new double[] {1.0};
        jPanel5.setLayout(jPanel5Layout);

        addSongBtn.setBackground(new java.awt.Color(204, 255, 204));
        addSongBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/plus.png"))); // NOI18N
        addSongBtn.setToolTipText("Add Song(s)");
        addSongBtn.setMaximumSize(new java.awt.Dimension(32, 32));
        addSongBtn.setMinimumSize(new java.awt.Dimension(36, 36));
        addSongBtn.setPreferredSize(new java.awt.Dimension(36, 36));
        addSongBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSongBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanel5.add(addSongBtn, gridBagConstraints);

        removeSongBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/minus.png"))); // NOI18N
        removeSongBtn.setToolTipText("Remove Song(s)");
        removeSongBtn.setMaximumSize(new java.awt.Dimension(36, 36));
        removeSongBtn.setMinimumSize(new java.awt.Dimension(36, 36));
        removeSongBtn.setPreferredSize(new java.awt.Dimension(36, 36));
        removeSongBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSongBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        jPanel5.add(removeSongBtn, gridBagConstraints);

        jPanel3.add(jPanel5, java.awt.BorderLayout.EAST);

        hintLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        hintLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hintLabel.setText("HINT: Double click rows to play song after adding them !");
        jPanel3.add(hintLabel, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 200));

        nowPlayingListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Title", "Artist", "Genre", "Duration", "song_item"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        nowPlayingListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                nowPlayingListTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(nowPlayingListTable);
        if (nowPlayingListTable.getColumnModel().getColumnCount() > 0) {
            nowPlayingListTable.getColumnModel().getColumn(0).setMaxWidth(40);
            nowPlayingListTable.getColumnModel().getColumn(2).setMaxWidth(200);
            nowPlayingListTable.getColumnModel().getColumn(3).setMaxWidth(200);
            nowPlayingListTable.getColumnModel().getColumn(4).setMaxWidth(100);
        }

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel4.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        topPanel.add(jPanel4, gridBagConstraints);

        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);

        java.awt.GridBagLayout bottomPanelLayout = new java.awt.GridBagLayout();
        bottomPanelLayout.columnWeights = new double[] {1.0};
        bottomPanelLayout.rowWeights = new double[] {1.0, 1.0, 1.0};
        bottomPanel.setLayout(bottomPanelLayout);

        jPanel2.setLayout(new java.awt.BorderLayout(10, 0));

        nowPlayingTimestampLabel.setText("0:00");
        jPanel2.add(nowPlayingTimestampLabel, java.awt.BorderLayout.WEST);

        maxDurationTimestampLabel.setText("0:00");
        jPanel2.add(maxDurationTimestampLabel, java.awt.BorderLayout.EAST);

        progressSlider.setMaximum(0);
        jPanel2.add(progressSlider, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 658;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        bottomPanel.add(jPanel2, gridBagConstraints);

        skipSongBtn.setText("Skip Song");
        skipSongBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skipSongBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        bottomPanel.add(skipSongBtn, gridBagConstraints);

        stopSessionBtn.setText("Stop Session");
        stopSessionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopSessionBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 10, 10);
        bottomPanel.add(stopSessionBtn, gridBagConstraints);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // =============================================================================
    // Event Callbacks
    // =============================================================================

    private void stopSessionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopSessionBtnActionPerformed
        if (player.isAlive()) {
            player.interrupt();
            logger.info("Stopped BackgroundPlayer Thread");
        }
        this.setVisible(false);
        this.dispose();
        new MainFrame().setVisible(true);
    }//GEN-LAST:event_stopSessionBtnActionPerformed

    private void addSongBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSongBtnActionPerformed
        // TODO add your handling code here:
        java.util.ArrayList<SongDTO> songsToAdd = (java.util.ArrayList) new KaraokeSessionAddSongDialog(this, songList).run();
        for (int i = 0; i < songsToAdd.size(); i++) {
            addSong(songsToAdd.get(i));
        }
    }//GEN-LAST:event_addSongBtnActionPerformed

    private void removeSongBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSongBtnActionPerformed
        DefaultTableModel tabModel = (DefaultTableModel) this.nowPlayingListTable.getModel();
        int[] selectedRows = nowPlayingListTable.getSelectedRows();
        if (selectedRows.length == 0) {
            if (this.player.getNowPlayingSongList().size() == 0)  {
                JOptionPane.showMessageDialog(this, "No song(s) added\n\nPlease add song by using the green \"+\" button", "Tips", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Please select the song(s) to remove by clicking on it before clicking the \"-\" button", "Tips", JOptionPane.INFORMATION_MESSAGE);
            }
            return;
        }
        this.removeSongs(selectedRows);
    }//GEN-LAST:event_removeSongBtnActionPerformed

    private void nowPlayingListTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nowPlayingListTableMousePressed
        // TODO add your handling code here:
        JTable table = (JTable) evt.getSource();
        Point point = evt.getPoint();
        int row = table.rowAtPoint(point);
        if (evt.getClickCount() == 2 && table.convertRowIndexToModel(table.getSelectedRow()) != -1) {
            // your valueChanged overridden method 
            // removeHtmlTagsFromTable(table);
            // boldTableRow(table, row);
            playSong(row);
        }
    }//GEN-LAST:event_nowPlayingListTableMousePressed

    private void skipSongBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skipSongBtnActionPerformed
        this.player.nextSong();
        this.updateCurrentPlaylistTable(this.player.getNowPlayingSongList());
    }//GEN-LAST:event_skipSongBtnActionPerformed

    private void infoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_infoBtnActionPerformed
        JOptionPane.showMessageDialog(this, this.sessionData.toString(), "Session Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_infoBtnActionPerformed

    private void historyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyBtnActionPerformed
        KaraokeSessionSongAddHistoryDialog historyDialog = new KaraokeSessionSongAddHistoryDialog(this, this.player.getSongHistory());
        historyDialog.setVisible(true);
    }//GEN-LAST:event_historyBtnActionPerformed

    // =============================================================================
    // =============================================================================
    // =============================================================================
    // Utility Functions
    // =============================================================================
    /**
     * Bold the values on table by add <b> tags to the values
     *
     * @param table which table
     * @param row which row
     */
    private void boldTableRow(JTable table, int row) {
        int colCount = table.getColumnCount();
        for (int i = 0; i < colCount; i++) {
            table.setValueAt("<html><b>" + table.getValueAt(row, i) + "</b></html>", row, i);
        }
    }

    private void removeHtmlTagsFromTable(JTable table) {
        int colCount = table.getColumnCount();
        int rowCount = table.getRowCount();
        for (int row = 0; row < rowCount; row++) {
            for (int col = 0; col < colCount; col++) {
                String newValue = (String) table.getValueAt(row, col);
                newValue = newValue.replace("<html>", "");
                newValue = newValue.replace("</html>", "");
                newValue = newValue.replace("<b>", "");
                newValue = newValue.replace("</b>", "");
                table.setValueAt(newValue, row, col);
            }
        }
    }

    // =============================================================================
    // =============================================================================
    // =============================================================================
    // Private function to modify the view
    // =============================================================================
    /**
     * Change the tableView of now playing song and switch songs
     *
     * @param row
     */
    private void playSong(int row) {
        if (!this.player.isAlive()) {
            this.player.start();
        }
        DefaultTableModel tableModel = (DefaultTableModel) this.nowPlayingListTable.getModel();
        this.player.changeSong(row);
        this.updateCurrentPlaylistTable(this.player.getNowPlayingSongList());

        this.player.setPlayerState(PlayerState.PLAYING);
        setNowPlayingText(this.player.getNowPlayingSongList().get(row).getLeft());
    }

    private void setNowPlayingText(SongDTO s) {
        if (s == null) {
            this.nowPlayingLabel.setText("Now Playing: ");
            return;
        }
        this.nowPlayingLabel.setText(String.format("Now Playing: %s by %s [%s]", new Object[]{s.getName(), s.getArtist(), s.getAlbum()}));
    }
    // =============================================================================
    // =============================================================================

    // =============================================================================
    // Public Functions for Background Player
    // =============================================================================
    /**
     * Update the playlist view
     *
     * @param currentPlaylist
     */
    public void updateCurrentPlaylistTable(ArrayList<Pair<SongDTO, Boolean>> currentPlaylist) {
        DefaultTableModel tabModel = (DefaultTableModel) this.nowPlayingListTable.getModel();
        tabModel.setRowCount(0);
        boolean songPlaying = false;
        for (int i = 0; i < currentPlaylist.size(); i++) {
            SongDTO s = currentPlaylist.get(i).getLeft();
            tabModel.addRow(new Object[]{Integer.toString(i + 1), s.getName(), s.getArtist(), s.getGenre(), s.getDurationString(), s});
            if (currentPlaylist.get(i).getRight()) {
                boldTableRow(this.nowPlayingListTable, i);
                setNowPlayingText(s);
                songPlaying = true;
            }
        }
        if (!songPlaying) {
            setNowPlayingText(null);
        }
    }

    /**
     * Add song into the current playlist view
     *
     * @param item
     */
    public void addSong(SongDTO item) {
        this.player.addSong(item);
        this.updateCurrentPlaylistTable(player.getNowPlayingSongList());
    }

    /**
     * Remove songs from current playlistView
     *
     * @param idx
     */
    public void removeSongs(int[] idx) {
        this.player.removeSongs(idx);
        this.updateCurrentPlaylistTable(player.getNowPlayingSongList());
    }

    /**
     * Update the timestamp on the frame
     *
     * @param now
     * @param max
     */
    public void updateTimestamp(int now, int max) {
        nowPlayingTimestampLabel.setText((int) (now / 60) + ":" + String.format("%02d", (now % 60)));
        maxDurationTimestampLabel.setText((int) (max / 60) + ":" + String.format("%02d", (max % 60)));
        progressSlider.setMaximum(max);
        progressSlider.setValue(now);
    }

    /**
     * Display the lyrics
     *
     * @param top Lyrics to show on top of the lyricsPane
     * @param middle Lyrics to show on middle of the lyricsPane
     * @param bottom Lyrics to show on bottom of the lyricsPane
     * @param highlight which lyric to bold? 1 = top; 2 = middle; 3 = bottom
     */
    public void displayLyrics(String top, String middle, String bottom, int highlight) {
        switch (highlight) {
            case 1:
                top = "<font size='5' color='black'><b>" + top + "</b></font>";
                middle = "<font color='#7D7D7D'>" + middle + "</font>";
                bottom = "<font color='#7D7D7D'>" + bottom + "</font>";
                break;
            case 2:
                middle = "<font size='5' color='black'><b>" + middle + "</b></font>";
                top = "<font color='#7D7D7D'>" + top + "</font>";
                bottom = "<font color='#7D7D7D'>" + bottom + "</font>";
                break;
            case 3:
                top = "<font color='#7D7D7D'>" + top + "</font>";
                middle = "<font color='#7D7D7D'>" + middle + "</font>";
                bottom = "<font size='5' color='black'><b>" + bottom + "</b></font>";
                break;
        }
        lyricsPane.setText(
                "<html>"
                + "<head>"
                + "</head>"
                + "<body><center>"
                + "<br><div>"
                + top
                + "</div><br><br>"
                + "<div>"
                + middle
                + "</div><br><br>"
                + "<div>"
                + bottom
                + "</div>"
                + "</center></body>"
                + "</html>");
    }

    // ====================================
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSongBtn;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JLabel hintLabel;
    private javax.swing.JButton historyBtn;
    private javax.swing.JButton infoBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JEditorPane lyricsPane;
    private javax.swing.JLabel maxDurationTimestampLabel;
    private javax.swing.JLabel nowPlayingLabel;
    private javax.swing.JTable nowPlayingListTable;
    private javax.swing.JLabel nowPlayingTimestampLabel;
    private javax.swing.JSlider progressSlider;
    private javax.swing.JButton removeSongBtn;
    private javax.swing.JButton skipSongBtn;
    private javax.swing.JButton stopSessionBtn;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
    // ====================================
    // ====================================
}
